generator client {
  provider = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions = [vector]
}

model Video {
  id            String   @id @default(uuid())
  slug          String?
  title         String?
  videoUrl      String
  transcription String?
  status        String
  createdAt     DateTime?    @default(now()) @db.Timestamptz(6)
  updatedAt     DateTime?    @default(now()) @updatedAt @db.Timestamptz(6)
  userId        String
  isSearchable  Boolean?     @default(false)
  user          User         @relation(fields: [userId], references: [id])
  VideoChunk    VideoChunk[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  videos        Video[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model VideoChunk {
  id              Int                    @id @default(autoincrement())
  video_id        String?
  chunk_text      String
  chunk_embedding Unsupported("vector(1536)") @map("chunk_embedding") // OpenAI embeddings are 1536 dimensions
  chunk_start     Int?                   // character position start
  chunk_end       Int?                   // character position end
  chunk_start_time Float?                // timestamp in seconds
  chunk_end_time   Float?                // timestamp in seconds
  created_at      DateTime?              @default(now()) @db.Timestamptz(6)
  Video           Video?                 @relation(fields: [video_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([chunk_embedding(type: Vector)]) // For pgvector
}
