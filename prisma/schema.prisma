generator client {
  provider = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions = [vector]
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
    projects      Project[]
    actions       Action[]
    userVideos    UserVideo[]
    exercises     UserExercise[]
    goals         Goal[]
    userPairs     UserPair[]
    exchangeUsers ExchangeUser[]
    setups        Setup[]
    transcriptionSessions TranscriptionSession[]
    verificationTokens VerificationToken[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime
    userId     String
    user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([identifier, token])
    @@index([userId])
}

model Action {
    id              String   @id @default(cuid())
    name            String
    description     String?
    dueDate         DateTime?
    status          String   @default("ACTIVE")
    priority        String   @default("Quick")
    project         Project?  @relation(fields: [projectId], references: [id], onDelete: Cascade)
    projectId       String?
    createdBy       User     @relation(fields: [createdById], references: [id])
    createdById     String

    @@index([projectId])
    @@index([createdById])
}

model Outcome {
    id          String   @id @default(cuid())
    description String
    projects    Project[]  @relation("ProjectOutcomes")
    goals       Goal[]     @relation("GoalOutcomes")
}

model Project {
    id              String    @id @default(cuid())
    name            String
    slug            String   @unique
    status          String    @default("ACTIVE")
    priority        String    @default("NONE")
    progress        Float     @default(0)
    
    // Dates
    createdAt       DateTime    @default(now())
    reviewDate      DateTime?
    nextActionDate  DateTime?
    
    // Text fields
    actions         Action[]
    outcomes        Outcome[]   @relation("ProjectOutcomes")
    
    // User relation (same as your existing Post model)
    createdBy       User        @relation(fields: [createdById], references: [id])
    createdById     String

    @@index([name])
    @@index([status])
    @@index([priority])
}

model Video {
  id            String   @id @default(uuid())
  slug          String? @unique
  title         String?
  videoUrl      String  @unique
  summary       String?  @db.Text    // Added field for short summary
  description   String?  @db.Text    // Added field for longer description
  transcription String?
  status        String
  createdAt     DateTime?    @default(now()) @db.Timestamptz(6)
  updatedAt     DateTime?    @default(now()) @updatedAt @db.Timestamptz(6)
  isSearchable  Boolean?     @default(false)
  setups        Setup[]
  VideoChunk    VideoChunk[]
  users         UserVideo[]
}

model UserVideo {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  video     Video    @relation(fields: [videoId], references: [id])
  videoId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, videoId])
  @@index([userId])
  @@index([videoId])
}

model VideoChunk {
  id              Int                    @id @default(autoincrement())
  video_id        String?
  chunk_text      String
  //chunk_embedding Unsupported("vector(1536)") @map("chunk_embedding") // OpenAI embeddings are 1536 dimensions
  chunk_start     Int?                   // character position start
  chunk_end       Int?                   // character position end
  chunk_start_time Float?                // timestamp in seconds
  chunk_end_time   Float?                // timestamp in seconds
  created_at      DateTime?              @default(now()) @db.Timestamptz(6)
  Video           Video?                 @relation(fields: [video_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Week {
  id        Int      @id @default(autoincrement())
  startDate DateTime
  endDate   DateTime
  days      Day[]
}

model Day {
  id          Int       @id @default(autoincrement())
  date        DateTime
  week        Week      @relation(fields: [weekId], references: [id])
  weekId      Int
  exercises   UserExercise[]
  journals    Journal[]
  
  @@index([weekId])
}

model Exercise {
  id           Int            @id @default(autoincrement())
  title        String
  description  String?
  userExercises UserExercise[]
}

model UserExercise {
  id          Int      @id @default(autoincrement())
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  exercise    Exercise @relation(fields: [exerciseId], references: [id])
  exerciseId  Int
  day         Day      @relation(fields: [dayId], references: [id])
  dayId       Int

  @@index([userId])
  @@index([exerciseId])
  @@index([dayId])
}

model Goal {
  id           Int         @id @default(autoincrement())
  title        String
  description  String?
  dueDate      DateTime?
  lifeDomain   LifeDomain  @relation(fields: [lifeDomainId], references: [id])
  lifeDomainId Int
  user         User        @relation(fields: [userId], references: [id])
  userId       String
  outcomes     Outcome[]   @relation("GoalOutcomes")

  @@index([lifeDomainId])
  @@index([userId])
}

model LifeDomain {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  goals       Goal[]
}

model Journal {
  id          Int      @id @default(autoincrement())
  content     String   @db.Text
  day         Day      @relation(fields: [dayId], references: [id])
  dayId       Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([dayId])
}

// Aka 'Idea'
model Setup {
  id              String   @id @default(uuid())
  content         String   @db.Text
  entryPrice      Decimal?
  takeProfitPrice Decimal?
  stopPrice       Decimal?
  timeframe       String?  // e.g., "short_term", "long_term"
  confidence      Int?     // 1-5 scale
  direction       String
  status          String   @default("active") // active, expired, completed
  privacy         String   @default("private") // public, private
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  videoId         String?
  video           Video?    @relation(fields: [videoId], references: [id], onDelete: Cascade)
  pairId          Int
  pair            Pair     @relation(fields: [pairId], references: [id])
  coinId          Int?
  coin            Coin?    @relation(fields: [coinId], references: [id])
  userId          String
  user            User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([videoId])
  @@index([pairId])
  @@index([coinId])
}

model Coin {
  id        Int        @id @default(autoincrement())
  name      String
  symbol    String
  imageUrl  String?
  coinId    String?    @unique
  setups    Setup[]
  pairs     PairCoin[]
}

model Pair {
  id        Int        @id @default(autoincrement())
  symbol    String     @unique
  userPairs UserPair[]
  setups    Setup[]
  coins     PairCoin[]
}

model PairCoin {
  pair      Pair     @relation(fields: [pairId], references: [id])
  pairId    Int
  coin      Coin     @relation(fields: [coinId], references: [id])
  coinId    Int

  @@id([pairId, coinId])
  @@index([coinId])
  @@index([pairId])
}

model UserPair {
  id         Int     @id @default(autoincrement())
  userId     String
  pairId     Int
  exchangeId Int
  lastTradesSyncTime DateTime?
  
  user       User     @relation(fields: [userId], references: [id])
  pair       Pair     @relation(fields: [pairId], references: [id])
  exchange   Exchange @relation(fields: [exchangeId], references: [id])

  @@unique([userId, pairId, exchangeId])
}

model Exchange {
  id           Int        @id @default(autoincrement())
  name         String     @unique
  userPairs    UserPair[]
  exchangeUsers ExchangeUser[]
}

model ExchangeUser {
  id           Int        @id @default(autoincrement())
  userId       String
  exchangeId   Int
  lastTradesSyncTime DateTime?
  user       User     @relation(fields: [userId], references: [id])
  exchange   Exchange @relation(fields: [exchangeId], references: [id])
}

model TranscriptionSession {
  id            String   @id @default(cuid())
  sessionId     String   @unique // This will store our session_${timestamp} identifier
  transcription String?  @db.Text
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  userId        String?
  user          User?    @relation(fields: [userId], references: [id])

  @@index([sessionId])
  @@index([userId])
}
 