generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [vector]
}

model Post {
  id          Int      @id @default(autoincrement())
  name        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdById String
  createdBy   User     @relation(fields: [createdById], references: [id])

  @@index([name])
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  refresh_token_expires_in Int?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?
  image                 String?
  accounts              Account[]
  actions               Action[]
  alerts                Alert[]
  exchangeUsers         ExchangeUser[]
  goals                 Goal[]
  Note                  Note[]
  orders                Order[]
  Outcome               Outcome[]
  positions             Position[]
  posts                 Post[]
  projects              Project[]
  sessions              Session[]
  setups                Setup[]
  TeamMember            TeamMember[]
  transcriptionSessions TranscriptionSession[]
  UserDay               UserDay[]
  exercises             UserExercise[]
  userPairs             UserPair[]
  userTrades            UserTrade[]
  userVideos            UserVideo[]
  verificationTokens    VerificationToken[]
  Workflow              Workflow[]
  portfolioSnapshots    PortfolioSnapshot[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([identifier, token])
  @@index([userId])
}

model Action {
  id           String         @id @default(cuid())
  name         String
  description  String?
  dueDate      DateTime?
  status       String         @default("ACTIVE")
  priority     String         @default("Quick")
  projectId    String?
  createdById  String
  createdBy    User           @relation(fields: [createdById], references: [id])
  project      Project?       @relation(fields: [projectId], references: [id], onDelete: Cascade)
  WorkflowStep WorkflowStep[]

  @@index([projectId])
  @@index([createdById])
}

model Outcome {
  id          String    @id @default(cuid())
  description String
  dueDate     DateTime?
  type        String?   @default("daily")
  projectId   String?
  userId      String?
  User        User?     @relation(fields: [userId], references: [id], onDelete: Restrict)
  goals       Goal[]    @relation("GoalOutcomes")
  projects    Project[] @relation("ProjectOutcomes")

  @@index([projectId])
  @@index([userId])
}

model Project {
  id                    String                 @id @default(cuid())
  name                  String
  status                String                 @default("ACTIVE")
  priority              String                 @default("NONE")
  progress              Float                  @default(0)
  createdAt             DateTime               @default(now())
  reviewDate            DateTime?
  nextActionDate        DateTime?
  createdById           String
  slug                  String                 @unique
  description           String?
  actions               Action[]
  createdBy             User                   @relation(fields: [createdById], references: [id])
  TeamMember            TeamMember[]
  transcriptionSessions TranscriptionSession[]
  Goal                  Goal[]                 @relation("GoalProjects")
  outcomes              Outcome[]              @relation("ProjectOutcomes")

  @@index([name])
  @@index([status])
  @@index([priority])
}

model Video {
  id            String       @id @default(uuid())
  slug          String?      @unique
  title         String?
  videoUrl      String       @unique
  transcription String?
  status        String
  createdAt     DateTime?    @default(now()) @db.Timestamptz(6)
  updatedAt     DateTime?    @default(now()) @updatedAt @db.Timestamptz(6)
  isSearchable  Boolean?     @default(false)
  description   String?
  summary       String?
  setups        Setup[]
  users         UserVideo[]
  VideoChunk    VideoChunk[]
}

model UserVideo {
  id        String   @id @default(cuid())
  userId    String
  videoId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  video     Video    @relation(fields: [videoId], references: [id])

  @@unique([userId, videoId])
  @@index([userId])
  @@index([videoId])
}

model VideoChunk {
  id               Int       @id @default(autoincrement())
  video_id         String?
  chunk_text       String
  chunk_start      Int?
  chunk_end        Int?
  chunk_start_time Float?
  chunk_end_time   Float?
  created_at       DateTime? @default(now()) @db.Timestamptz(6)
  Video            Video?    @relation(fields: [video_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Week {
  id        Int      @id @default(autoincrement())
  startDate DateTime
  endDate   DateTime
  days      Day[]
}

model Day {
  id        Int            @id @default(autoincrement())
  date      DateTime
  weekId    Int
  week      Week           @relation(fields: [weekId], references: [id])
  journals  Journal[]
  Note      Note[]
  UserDay   UserDay[]
  exercises UserExercise[]

  @@index([weekId])
}

model Exercise {
  id            Int            @id @default(autoincrement())
  title         String
  description   String?
  userExercises UserExercise[]
}

model UserExercise {
  id         Int      @id @default(autoincrement())
  userId     String
  exerciseId Int
  dayId      Int
  day        Day      @relation(fields: [dayId], references: [id])
  exercise   Exercise @relation(fields: [exerciseId], references: [id])
  user       User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([exerciseId])
  @@index([dayId])
}

model Goal {
  id           Int        @id @default(autoincrement())
  title        String
  description  String?
  dueDate      DateTime?
  lifeDomainId Int
  userId       String
  lifeDomain   LifeDomain @relation(fields: [lifeDomainId], references: [id])
  user         User       @relation(fields: [userId], references: [id])
  outcomes     Outcome[]  @relation("GoalOutcomes")
  Project      Project[]  @relation("GoalProjects")

  @@index([lifeDomainId])
  @@index([userId])
}

model LifeDomain {
  id          Int     @id @default(autoincrement())
  title       String
  description String?
  goals       Goal[]
}

model Journal {
  id        Int      @id @default(autoincrement())
  content   String
  dayId     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  day       Day      @relation(fields: [dayId], references: [id])

  @@index([dayId])
}

model Setup {
  id                     String                @id @default(uuid())
  content                String
  entryPrice             Decimal?
  takeProfitPrice        Decimal?
  stopPrice              Decimal?
  timeframe              String?
  confidence             Int?
  status                 String                @default("active")
  createdAt              DateTime              @default(now())
  updatedAt              DateTime              @updatedAt
  videoId                String?
  pairId                 Int
  direction              String
  coinId                 Int?
  privacy                String                @default("private")
  userId                 String
  transcriptionSessionId String?
  alerts                 Alert[]
  coin                   Coin?                 @relation(fields: [coinId], references: [id])
  pair                   Pair                  @relation(fields: [pairId], references: [id])
  transcriptionSession   TranscriptionSession? @relation("TranscriptionSetups", fields: [transcriptionSessionId], references: [id])
  user                   User                  @relation(fields: [userId], references: [id])
  video                  Video?                @relation(fields: [videoId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([videoId])
  @@index([pairId])
  @@index([coinId])
  @@index([transcriptionSessionId])
}

model Coin {
  id         Int     @id @default(autoincrement())
  name       String
  symbol     String
  imageUrl   String?
  coinId     String? @unique
  basePairs  Pair[]  @relation("BaseCoinPairs")
  quotePairs Pair[]  @relation("QuoteCoinPairs")
  setups     Setup[]
}

model Pair {
  id          Int         @id @default(autoincrement())
  symbol      String      @unique
  baseCoinId  Int         @default(1)
  quoteCoinId Int         @default(1)
  alerts      Alert[]
  orders      Order[]
  positions   Position[]
  baseCoin    Coin        @relation("BaseCoinPairs", fields: [baseCoinId], references: [id])
  quoteCoin   Coin        @relation("QuoteCoinPairs", fields: [quoteCoinId], references: [id])
  setups      Setup[]
  userPairs   UserPair[]
  userTrades  UserTrade[]

  @@index([baseCoinId])
  @@index([quoteCoinId])
}

model UserPair {
  id                 Int       @id @default(autoincrement())
  userId             String
  pairId             Int
  exchangeId         Int
  lastTradesSyncTime DateTime?
  exchange           Exchange  @relation(fields: [exchangeId], references: [id])
  pair               Pair      @relation(fields: [pairId], references: [id])
  user               User      @relation(fields: [userId], references: [id])

  @@unique([userId, pairId, exchangeId])
}

model Exchange {
  id            Int            @id @default(autoincrement())
  name          String         @unique
  exchangeUsers ExchangeUser[]
  userPairs     UserPair[]
}

model ExchangeUser {
  id                 Int       @id @default(autoincrement())
  userId             String
  exchangeId         Int
  lastTradesSyncTime DateTime?
  exchange           Exchange  @relation(fields: [exchangeId], references: [id])
  user               User      @relation(fields: [userId], references: [id])
}

model TranscriptionSession {
  id            String       @id @default(cuid())
  sessionId     String       @unique
  transcription String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  userId        String?
  setupId       String?
  projectId     String?
  title         String?
  description   String?
  screenshots   Screenshot[]
  setups        Setup[]      @relation("TranscriptionSetups")
  project       Project?     @relation(fields: [projectId], references: [id])
  user          User?        @relation(fields: [userId], references: [id])

  @@index([projectId])
  @@index([sessionId])
  @@index([userId])
}

model Screenshot {
  id                     String               @id @default(cuid())
  url                    String
  timestamp              String
  transcriptionSessionId String
  createdAt              DateTime             @default(now())
  transcriptionSession   TranscriptionSession @relation(fields: [transcriptionSessionId], references: [id])
}

model Alert {
  id        String      @id @default(uuid())
  userId    String
  type      AlertType
  threshold Decimal
  direction Direction
  interval  String?
  status    AlertStatus @default(PENDING)
  createdAt DateTime    @default(now())
  pairId    Int
  setupId   String?
  pair      Pair        @relation(fields: [pairId], references: [id])
  setup     Setup?      @relation(fields: [setupId], references: [id])
  user      User        @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([pairId])
  @@index([setupId])
}

model UserTrade {
  id            Int      @id @default(autoincrement())
  ordertxid     String
  pair          String
  time          BigInt
  type          String
  ordertype     String
  price         String
  cost          String
  fee           String
  vol           Float
  margin        String
  leverage      String
  misc          String
  closedPnL     Decimal?
  tradeId       String   @unique
  transactionId String?  // from Hyperliquid: hash
  direction     String?  // from Hyperliquid: "Close Long", "Open Long", etc.
  exchange      String
  userId        String
  orderId       Int?
  pairId        Int?
  order         Order?   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  pairRecord    Pair?    @relation(fields: [pairId], references: [id])
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([pairId])
}

model Order {
  id            Int         @id @default(autoincrement())
  ordertxid     String
  time          BigInt
  type          String
  direction     String?     // from Hyperliquid: "Close Long", "Open Long", etc.
  pair          String
  amount        Decimal
  totalCost     Decimal
  fee           Decimal
  highestPrice  Decimal
  lowestPrice   Decimal
  averagePrice  Decimal
  exchange      String
  userId        String
  closedPnL     Decimal?
  createdAt     DateTime    @default(now())
  positionId    Int?
  pairId        Int?
  pairRecord    Pair?       @relation(fields: [pairId], references: [id])
  position      Position?   @relation(fields: [positionId], references: [id], onDelete: Cascade)
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  trades        UserTrade[]

  @@index([time])
  @@index([userId])
  @@index([pair])
  @@index([pairId])
}

model Position {
  id                Int      @id @default(autoincrement())
  status            String
  positionType      String
  direction         String
  pair              String
  pairId            Int?
  pairRecord        Pair?    @relation(fields: [pairId], references: [id])
  averageEntryPrice Decimal
  averageExitPrice  Decimal
  totalCostBuy      Decimal
  totalCostSell     Decimal
  amount            Decimal
  profitLoss        Decimal
  duration          String
  time              BigInt
  userId            String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  orders            Order[]
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([pair])
  @@index([pairId])
  @@index([time])
  @@index([status])
}

model Audience {
  id          String   @id
  value       String   @unique
  label       String
  description String   @default("")
  isDefault   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime
}

model Differentiator {
  id          String   @id
  value       String   @unique
  label       String
  description String   @default("")
  isDefault   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime
}

model Note {
  id        Int      @id @default(autoincrement())
  content   String
  type      String
  title     String?
  dayId     Int
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime
  Day       Day      @relation(fields: [dayId], references: [id])
  User      User     @relation(fields: [userId], references: [id])

  @@index([dayId])
  @@index([type])
  @@index([userId])
}

model TeamMember {
  id               String   @id
  name             String
  role             String
  responsibilities String[]
  avatarUrl        String?
  projectId        String
  userId           String
  Project          Project  @relation(fields: [projectId], references: [id])
  User             User     @relation(fields: [userId], references: [id])

  @@index([projectId])
  @@index([userId])
}

model UserDay {
  id        String   @id
  userId    String
  dayId     Int
  createdAt DateTime @default(now())
  updatedAt DateTime
  Day       Day      @relation(fields: [dayId], references: [id])
  User      User     @relation(fields: [userId], references: [id])

  @@unique([userId, dayId])
  @@index([dayId])
  @@index([userId])
}

model Workflow {
  id           String         @id
  title        String
  description  String?
  type         String
  createdById  String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime
  User         User           @relation(fields: [createdById], references: [id])
  WorkflowStep WorkflowStep[]

  @@index([createdById])
  @@index([type])
}

model WorkflowStep {
  id         String   @id
  workflowId String
  order      Int
  title      String
  actionId   String?
  status     String   @default("PENDING")
  Action     Action?  @relation(fields: [actionId], references: [id])
  Workflow   Workflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)

  @@index([actionId])
  @@index([workflowId])
}

enum AlertType {
  PRICE
  CANDLE
}

enum Direction {
  ABOVE
  BELOW
}

enum AlertStatus {
  PENDING
  TRIGGERED
  CANCELLED
}

model PortfolioSnapshot {
  id            String   @id @default(cuid())
  userId        String
  exchange      String
  timestamp     DateTime @default(now())
  totalUsdValue Decimal
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([userId, exchange])
  @@index([timestamp])
}
